from cga_py import cga_object as cg
from cga_py import e_1, e_2, e_12
import numpy as np
import numpy.testing as nt


def test_mult_cga():
    assert e_1 * e_1 == 1
    assert e_1 * e_2 == e_12
    assert e_1 * e_12 == e_2
    assert e_12 * e_12 == -1


def test_add_cga():
    end = 2000
    a = np.random.rand(32) * end - (end / 2)
    b = np.random.rand(32) * end - (end / 2)
    nt.assert_array_equal((cg(a) - cg(b)).coeff, a - b)


def test_sub_cga():
    end = 2000
    a = np.random.rand(32) * end - (end / 2)
    b = np.random.rand(32) * end - (end / 2)
    nt.assert_array_equal((cg(a) - cg(b)).coeff, a - b)


def test_add_float():
    end = 2000
    a = np.random.rand(32) * end - (end / 2)
    b = np.random.rand(1) * end - (end / 2)
    c = a.copy()
    c[0] = a[0] + b
    nt.assert_array_equal((cg(a) + b).coeff, c)


def test_wedge():
    a = [
        844.94424921,
        200.2260122,
        565.29703616,
        517.1192215,
        548.71211879,
        -982.0077644,
        434.89547631,
        930.81244647,
        721.32643468,
        -683.79338806,
        256.38840576,
        -355.69394934,
        681.53327362,
        -22.67814807,
        -107.08448605,
        -40.46962442,
        -996.95261258,
        830.73946602,
        777.66477061,
        716.48772892,
        959.13937444,
        -904.77431682,
        68.89817051,
        745.33768046,
        -109.06817517,
        -966.88535839,
        -488.53225325,
        602.89326163,
        375.97793653,
        -250.05151507,
        828.61258309,
        737.38156624,
    ]
    b = [
        725.11011632,
        -975.08265755,
        144.70651935,
        38.38948582,
        -471.52565452,
        -635.02557765,
        830.61336759,
        224.20132730,
        707.70612438,
        899.80033113,
        68.54020623,
        408.10948996,
        960.27688338,
        88.25762321,
        726.74012486,
        55.61095813,
        -652.38752758,
        545.21429166,
        -966.77157658,
        -899.58613452,
        559.06038443,
        -587.10321068,
        -298.20056367,
        -758.32329002,
        446.03370508,
        -616.11082366,
        342.97958509,
        337.41571782,
        416.78904346,
        498.01600767,
        139.74679988,
        755.44123826,
    ]
    c = [
        -196559.9066,
        -2.621340173 * 10**6,
        175840.6706,
        -85291.66173,
        -50133.0546,
        -1.219713828 * 10**6,
        130866.3544,
        312025.2015,
        801393.2829,
        -743805.7028,
        -408862.8069,
        -29429.6144,
        582383.6343,
        -995916.9588,
        272116.3361,
        -789343.7496,
        -1.039655143 * 10**6,
        1.567274899 * 10**6,
        -795294.1106,
        -2.439895344 * 10**6,
        612981.9762,
        -3.017614578 * 10**6,
        -293640.3294,
        -1.087887902 * 10**6,
        -8847.0000,
        -1.658335133 * 10**6,
        880405.0841,
        -4.152271715 * 10**6,
        -203657.8889,
        -1.535109243 * 10**6,
        -851255.0594,
        31507.0908,
    ]
    nt.assert_allclose((cg(a) ^ cg(b)).coeff, c)


def test_inner():
    a = [
        844.94424921,
        200.2260122,
        565.29703616,
        517.1192215,
        548.71211879,
        -982.0077644,
        434.89547631,
        930.81244647,
        721.32643468,
        -683.79338806,
        256.38840576,
        -355.69394934,
        681.53327362,
        -22.67814807,
        -107.08448605,
        -40.46962442,
        -996.95261258,
        830.73946602,
        777.66477061,
        716.48772892,
        959.13937444,
        -904.77431682,
        68.89817051,
        745.33768046,
        -109.06817517,
        -966.88535839,
        -488.53225325,
        602.89326163,
        375.97793653,
        -250.05151507,
        828.61258309,
        737.38156624,
    ]
    b = [
        725.11011632,
        -975.08265755,
        144.70651935,
        38.38948582,
        -471.52565452,
        -635.02557765,
        830.61336759,
        224.20132730,
        707.70612438,
        899.80033113,
        68.54020623,
        408.10948996,
        960.27688338,
        88.25762321,
        726.74012486,
        55.61095813,
        -652.38752758,
        545.21429166,
        -966.77157658,
        -899.58613452,
        559.06038443,
        -587.10321068,
        -298.20056367,
        -758.32329002,
        446.03370508,
        -616.11082366,
        342.97958509,
        337.41571782,
        416.78904346,
        498.01600767,
        139.74679988,
        755.44123826,
    ]
    c = [
        -2.530411112 * 10**6,
        1.599954023 * 10**6,
        1.822826693 * 10**6,
        -2.696604087 * 10**6,
        4.078937378 * 10**6,
        1.987185971 * 10**6,
        -1.187436685 * 10**6,
        -3.145964557 * 10**5,
        6.660333064 * 10**5,
        1.222146679 * 10**6,
        -8.956764629 * 10**5,
        1.539030775 * 10**6,
        8.028722657 * 10**5,
        70565.28404,
        2.593055265 * 10**5,
        1.393631531 * 10**5,
        -1.671812865 * 10**5,
        1.186760692 * 10**6,
        7.316558495 * 10**5,
        1.035028005 * 10**5,
        -9.843136698 * 10**5,
        -8.122890646 * 10**5,
        -4.099242511 * 10**5,
        3.647273854 * 10**5,
        1.631533479 * 10**6,
        4.475617144 * 10**5,
        -66825.4369,
        -1.210105317 * 10**6,
        1.603694721 * 10**6,
        -2.872501782 * 10**5,
        5.486739247 * 10**5,
        0,
    ]
    nt.assert_allclose((cg(a) | cg(b)).coeff, c)


def test_mult():
    a = [
        844.94424921,
        200.2260122,
        565.29703616,
        517.1192215,
        548.71211879,
        -982.0077644,
        434.89547631,
        930.81244647,
        721.32643468,
        -683.79338806,
        256.38840576,
        -355.69394934,
        681.53327362,
        -22.67814807,
        -107.08448605,
        -40.46962442,
        -996.95261258,
        830.73946602,
        777.66477061,
        716.48772892,
        959.13937444,
        -904.77431682,
        68.89817051,
        745.33768046,
        -109.06817517,
        -966.88535839,
        -488.53225325,
        602.89326163,
        375.97793653,
        -250.05151507,
        828.61258309,
        737.38156624,
    ]
    b = [
        725.11011632,
        -975.08265755,
        144.70651935,
        38.38948582,
        -471.52565452,
        -635.02557765,
        830.61336759,
        224.20132730,
        707.70612438,
        899.80033113,
        68.54020623,
        408.10948996,
        960.27688338,
        88.25762321,
        726.74012486,
        55.61095813,
        -652.38752758,
        545.21429166,
        -966.77157658,
        -899.58613452,
        559.06038443,
        -587.10321068,
        -298.20056367,
        -758.32329002,
        446.03370508,
        -616.11082366,
        342.97958509,
        337.41571782,
        416.78904346,
        498.01600767,
        139.74679988,
        755.44123826,
    ]
    c = [
        -3.811101289 * 10**6,
        -2.095686347 * 10**6,
        1.690338753 * 10**6,
        -466728.5936,
        4.028804322 * 10**6,
        767472.1417,
        2.298739138 * 10**6,
        1.191732144 * 10**6,
        2.424952035 * 10**6,
        -1.285441671 * 10**6,
        -27990.38776,
        4.458706304 * 10**6,
        683967.3284,
        -2.825153081 * 10**6,
        -2.705930939 * 10**6,
        -1.734110866 * 10**6,
        -2.538560167 * 10**6,
        4.500299091 * 10**6,
        -2.375924537 * 10**6,
        -668380.3831,
        353681.3339,
        -4.904203838 * 10**6,
        -610622.9800,
        -3.984941706 * 10**6,
        1.314357869 * 10**6,
        1.104393736 * 10**6,
        1.574466290 * 10**6,
        -3.333694615 * 10**6,
        4.480594744 * 10**6,
        -2.319311963 * 10**6,
        460431.7540,
        31507.0906,
    ]
    nt.assert_allclose((cg(a) * cg(b)).coeff, c)


def test_vec_ident():
    size = 6
    end = 2000
    for _ in range(500):
        a = cg(np.random.rand(size) * end - (end / 2))
        b = cg(np.random.rand(size) * end - (end / 2))
        nt.assert_allclose((a * b).coeff, (((a ^ b) + (a | b))).coeff)
